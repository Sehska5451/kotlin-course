package main.kotlin.lessons.lesson12

fun main () {
    val homework12 = listOf(1, 2, 3, 4, 5, 6, 7, 8)
    val textCollection1 = listOf("One", "Two", null, "Three", "Four", null)

//Задачи на приведение коллекции к значению
// 1. Проверить, что размер коллекции больше 5 элементов.
    println(homework12.size > 5)
// 2. Проверить, что коллекция пустая
    println(homework12.isEmpty())
// 3. Проверить, что коллекция не пустая
    println(homework12.isNotEmpty())
// 4. Взять элемент по индексу или создать значение если индекса не существует
    println(homework12.getOrElse(2) { 5 })
// 5. Собрать коллекцию в строку
    println(homework12.joinToString(" ; "))
// 6. Посчитать сумму всех значений
    println(homework12.sum())
// 7. Посчитать среднее
    println(homework12.average())
// 8. Взять максимальное число
    println(homework12.max())
// 9. Взять минимальное число
    println(homework12.min())
// 10. Взять первое число или null
    println(homework12.firstOrNull())
// 11. Проверить что коллекция содержит элемент
    println(homework12.contains(3))

//Задачи на обработку коллекций
// 12. Отфильтровать коллекцию по диапазону 18-30
    println(homework12.filter { it in 18..30 })
// 13. Выбрать числа, которые не делятся на 2 и 3 одновременно
    println(homework12.filter { it % 3 > 0 || it % 2 > 0 })
// 14. Очистить текстовую коллекцию от null элементов
    println(textCollection1.)
// 15. Преобразовать текстовую коллекцию в коллекцию длин слов
    println(textCollection1.map { it.length })
// 16. Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    println(textCollection1.associate { it.reversed() to it.length })
// 17. Отсортировать список в алфавитном порядке
    println(textCollection1.sorted())
// 18. Взять первые 3 элемента списка
    println(textCollection1.take(3))
// 19. Распечатать квадраты элементов списка
    println(homework12.forEach { it * it })
// 20. Группировать список по первой букве слов
    println(textCollection1.groupBy { it.first() })
// 21. Очистить список от дублей
    println(textCollection1.distinct())
// 22. Отсортировать список по убыванию
    println(homework12.sortedByDescending())
// 23. Взять последние 3 элемента списка
    println(homework12.takeLast(3))
    val list = listOf(
        "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина",
        "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка",
        "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус",
        "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник",
        "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка"
    )
}

// 24. Характеристика числовой коллекции
//Если коллекция пустая - “Пусто”
fun a1(a: List<Int>): String {
    return when {
        a.isEmpty() -> "Пусто"
//Если количество элементов меньше пяти - “Короткая”
        a.size < 5 -> "Короткая"
//Если коллекция начинается с 0 - “Стартовая”
        a.firstOrNull(0) -> "Стартовая"
//Если сумма всех чисел больше 10000 - “Массивная”
        a.sum() > 10000 -> "Массивная"
//Если среднее значение равно 10 - “Сбалансированная”
        a.average() == 10 -> "Сбалансированная"
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
        a.joinToString("").length == 20 -> "Клейкая"
//Если максимальное число меньше -10 - “Отрицательная”
        a.maxOrNull()?.let { it < 10 } -> "Отрицательная"
//Если минимальное число больше 1000 - “Положительная”
        a.minOrNull()?.let { it > 1000 } -> "Положительная"
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
        a.contains(3) && a.contains(14) -> "Пи***тая"
//Иначе - “Уникальная”
        else -> "Уникальная"
    }
}

// 25. Анализ учебных оценок
//Напиши функцию, которая принимает список чисел и возвращает список чисел
//Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
// Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего метода являлся основой для следующего.
fun a2(a: List<Int>): List<Int> {
    a.filter { it >= 60 }
    a.sorted()
    a.take(3)
    return a
}
//26. Создание каталога по первой букве
//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy
fun a3(a: List<String>): Map<Char, List<String> {
    return a
    .map { it.lowercase() }
    .filter { it.isNotEmpty() }
    .groupBy { it.first() }
}
//27. Подсчёт средней длины слов в списке
//Напиши функцию, которая принимает список строк и возвращает строку.
//Начальные значения взять из предыдущей задачи.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вернуть форматированный текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.
fun a4(a: List<String>): Double {
    a.forEach { it.length }

}
//28. Категоризация чисел
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
fun a5(a: List<Int>): Map<String, Int> {
    a.distinct()
    a.sortedDescending()
    a.groupBy { it % 2 == 0 }
    a.groupBy { it % 2 !== 0 }
    return a
}
// 29. Поиск первого подходящего элемента
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его, либо null если значения не нашлось.
fun a6(a: List<Int>, b: Int): Int? {
    a.filter { it > b }
    return a
}
